using DeltaAPI.Models;
using DeltaAPI.RN;
using DeltaAPI.RN.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using System.Reflection;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddSwaggerGen(c =>
{
    //The generated Swagger JSON file will have these properties.
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Capacidad de pago",
        Version = "v1",
        Description = "Calculo de capacidad de enduedamiento segun ingresos y gastos del cliente",
        //TermsOfService = new Uri("http://www.deltacredit.com.co/TermsOfService"),
        Contact = new OpenApiContact
        { Name = "Jhon Sebastian Camargo Contreras", Email = "jcamargo@deltacredit.com.co", Url = new Uri("http://www.deltacredit.com.co") }
    });


    //Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    //... and tell Swagger to use those XML comments.
    c.IncludeXmlComments(xmlPath);
});

builder.Services.AddDbContext<QatarContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("ConnectionSQLServer"));
});

// Add services to the container.
builder.Services.AddScoped<ICapacidadDePagoRN, CapacidadDePagoRN>();
builder.Services.AddScoped<IIngresosFuturosRN, IngresosFuturosRN>();
builder.Services.AddScoped<IModeloPricingRN, ModeloPricingRN>();

// Add repositories
//builder.Services.AddScoped<IExampleRepository, ExampleRepository>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
